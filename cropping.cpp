//Karen Wang//wangkh@usc.edu//Sept 18 2016#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char *argv[]){    //------------------ Command Line Input --------------------//    // Define file pointer and other variables	FILE *file;	int BytesPerPixel;//greyscale or RGB	int SizeWidth = 250; //default width    int SizeHeight= 300; //default height    int topX, topY, bottomX, bottomY;//user input (x,y) of top left and bottom right coordiantes		// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Size = 250x300]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4){		BytesPerPixel = 1; // default is grey image	} 	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5){			SizeWidth = atoi(argv[4]);            SizeHeight= atoi(argv[5]);		}	}		// Allocate image data array	unsigned char Imagedata[SizeHeight][SizeWidth][BytesPerPixel];	    // Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), SizeHeight*SizeWidth*BytesPerPixel, file);	fclose(file);    //Extract user-specified Top-Left and Bottom-Right coordinates    if (argc<10) {        cout << "Syntax Error - Incorrect Parameter Usage:" << endl;        cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Width = 250] [Height = 250] [TopLeftX = 55] [TopLeftY = 85] [BottomRightX = 184] [BottomRightY = 214]" << endl;    }    else    {        topX = atoi(argv[6]);        topY = atoi(argv[7]);        bottomX = atoi(argv[8]);        bottomY = atoi(argv[9]);    }                //------------------ Output to Command Line--------------------//    cout<<"User Inputs:"<<endl;    cout<<"Input filename: "<<argv[1]<<endl;    cout<<"Output filename: "<<argv[2]<<endl;    cout<<"Bytes Per Pixel: "<<argv[3]<<endl;    cout<<"Input Image Width: "<<argv[4]<<endl;    cout<<"Input Image Height: "<<argv[5]<<endl;    cout<<"Top Left x-coordinate: "<<argv[6]<<endl;    cout<<"Top Left y-coordinate: "<<argv[7]<<endl;    cout<<"Bottom Right x-coordinate: "<<argv[8]<<endl;    cout<<"Bottom Right y-coordinate: "<<argv[9]<<endl;                //------------------ Cropping Algorithim --------------------//    //Calculate output Image Height & Width    int newWidth;    int newHeight;    newWidth= (bottomX-topX)+1;    newHeight= (bottomY-topY)+1;            //Initilize Output Image Array    unsigned char croppedImage[newHeight][newWidth][BytesPerPixel];    for (int i=0; i<newHeight; i++) {        for(int j=0; j<newWidth; j++)        {            for (int k=0; k<BytesPerPixel; k++)            {                croppedImage[i][j][k]=0;            }        }    }            //Map old image pixels to new image    for (int i=0; i<newHeight; i++) {        for (int j=0; j<newWidth; j++) {                        /* Uncomment below line to get old to new pixel mapping*/            //cout<<"("<<i<<","<<j<<") -> ("<<topX+i<<","<<topY+j<<")"<<endl;                        for (int k=0; k<BytesPerPixel; k++) {                croppedImage[i][j][k]=Imagedata[topY+i][topX+j][k];            }        }    }        //------------------ Output to New Image --------------------//	//Write new image data (filename specified by second argument) from croppedImage matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}    fwrite(croppedImage, sizeof(unsigned char),  newHeight*newWidth*BytesPerPixel, file);	fclose(file);            //------------------ Output to Command Line--------------------//    //Output New Image Specfications    cout<<"\nNew Image Specifications:"<<endl;    cout << "newWidth= "<<newWidth<<endl;    cout << "newHeight= "<<newHeight<<endl;    cout <<"topX=" << topX<<endl;    cout <<"topY=" << topY<<endl;    cout <<"bottomX=" << bottomX<<endl;    cout <<"bottomY=" << bottomY<<endl;    cout << "BytesPerPixel="<<BytesPerPixel<<endl;    	return 0;}